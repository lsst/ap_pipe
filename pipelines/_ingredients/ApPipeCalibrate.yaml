description: End to end Alert Production pipeline
# Look in subdirectories of $AP_PIPE_DIR/pipelines to find customized pipelines
# for each camera. Those pipelines import this general AP pipeline.
#
# NOTES
# Remember to run `apdb-cli create-sql`
# Option to specify connection_timeout for sqlite APDBs encountering lock errors, i.e.,
# --connection_timeout 240

# WARNING: camera-specific pipelines importing this pipeline may
# blow away all the configs that are set in this file.
# To update a pipeline config prior to DM-35504, you MUST put it in either,
# e.g., $AP_PIPE_DIR/config/$CAMERA/someTask.py, or in a camera-specific,
# pipeline, e.g., $AP_PIPE_DIR/pipelines/$CAMERA/ApPipe.yaml.

imports:
  - location: $AP_PIPE_DIR/pipelines/_ingredients/ProcessCcdCalibrate.yaml
parameters:
  # Pipeline configurable to run on both goodSeeing and deep templates, depending on dataset.
  coaddName: goodSeeing
  # APDB config file must be user-specified
  apdb_config:
tasks:
  retrieveTemplate:  # For multi-tract difference imaging
    class: lsst.ip.diffim.getTemplate.GetTemplateTask
    config:
      connections.coaddName: parameters.coaddName
  subtractImages:
    class: lsst.ip.diffim.subtractImages.AlardLuptonSubtractTask
    config:
      connections.coaddName: parameters.coaddName
      doApplyExternalCalibrations: False
  detectAndMeasure:
    class: lsst.ip.diffim.detectAndMeasure.DetectAndMeasureTask
    config:
      connections.coaddName: parameters.coaddName
      doSkySources: True
  filterDiaSrcCat:
    class: lsst.ap.association.FilterDiaSourceCatalogTask
    config:
      doRemoveSkySources: True
      connections.coaddName: parameters.coaddName
  rbClassify:
    class: lsst.meas.transiNet.RBTransiNetTask
    config:
      modelPackageStorageMode: butler
      connections.coaddName: parameters.coaddName
  transformDiaSrcCat:
    class: lsst.ap.association.TransformDiaSourceCatalogTask
    config:
      doRemoveSkySources: True
      connections.coaddName: parameters.coaddName
      doIncludeReliability: True  # Output from rbClassify
  getRegionTimeFromVisit:
    class: lsst.pipe.tasks.getRegionTimeFromVisit.GetRegionTimeFromVisitTask
    config:
      connections.coaddName: parameters.coaddName
  diaPipe:
    class: lsst.ap.association.DiaPipelineTask
    config:
      doConfigureApdb: False
      apdb_config_url: parameters.apdb_config
      connections.coaddName: parameters.coaddName
subsets:
  apPipe:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - retrieveTemplate
      - subtractImages
      - detectAndMeasure
      - rbClassify
      - transformDiaSrcCat
      - getRegionTimeFromVisit
      - diaPipe
      - filterDiaSrcCat
    description: >
      An alias of ApPipe to use in higher-level pipelines.
contracts:
  - detectAndMeasure.doSkySources == transformDiaSrcCat.doRemoveSkySources
  # Inputs and outputs must match. For consistency, contracts are written in execution order:
  #     first task == second task, then sorted by (first, second)
  # Use of ConnectionsClass for templated fields is a workaround for DM-30210
  - contract: retrieveTemplate.connections.ConnectionsClass(config=retrieveTemplate).template.name ==
              subtractImages.connections.ConnectionsClass(config=subtractImages).template.name
    msg: "retrieveTemplate.template != subtractImages.template"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).difference.name ==
              detectAndMeasure.connections.ConnectionsClass(config=detectAndMeasure).difference.name
    msg: "subtractImages.difference != detectAndMeasure.difference"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).science.name ==
              detectAndMeasure.connections.ConnectionsClass(config=detectAndMeasure).science.name
    msg: "subtractImages.science != detectAndMeasure.science"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).template.name ==
              diaPipe.connections.ConnectionsClass(config=diaPipe).template.name
    msg: "subtractImages.template != diaPipe.template"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).science.name ==
              diaPipe.connections.ConnectionsClass(config=diaPipe).exposure.name
    msg: "subtractImages.science != diaPipe.exposure"
  - contract: detectAndMeasure.connections.ConnectionsClass(config=detectAndMeasure).diaSources.name ==
              filterDiaSrcCat.connections.ConnectionsClass(config=filterDiaSrcCat).diaSourceCat.name
    msg: "detectAndMeasure.diaSources != filterDiaSrcCat.diaSourceCat"
  - contract: detectAndMeasure.connections.ConnectionsClass(config=detectAndMeasure).subtractedMeasuredExposure.name ==
              rbClassify.connections.ConnectionsClass(config=rbClassify).difference.name
    msg: "detectAndMeasure.subtractedMeasuredExposure != rbClassify.difference"
  - contract: detectAndMeasure.connections.ConnectionsClass(config=detectAndMeasure).subtractedMeasuredExposure.name ==
              transformDiaSrcCat.connections.ConnectionsClass(config=transformDiaSrcCat).diffIm.name
    msg: "detectAndMeasure.subtractedMeasuredExposure != transformDiaSrcCat.diffIm"
  - contract: detectAndMeasure.connections.ConnectionsClass(config=detectAndMeasure).subtractedMeasuredExposure.name ==
              diaPipe.connections.ConnectionsClass(config=diaPipe).diffIm.name
    msg: "detectAndMeasure.subtractedMeasuredExposure != diaPipe.diffIm"
  - contract: filterDiaSrcCat.connections.ConnectionsClass(config=filterDiaSrcCat).filteredDiaSourceCat.name ==
              rbClassify.connections.ConnectionsClass(config=rbClassify).diaSources.name
    msg: "filterDiaSrcCat.filteredDiaSourceCat != rbClassify.diaSources"
  - contract: filterDiaSrcCat.connections.ConnectionsClass(config=filterDiaSrcCat).filteredDiaSourceCat.name ==
              transformDiaSrcCat.connections.ConnectionsClass(config=transformDiaSrcCat).diaSourceCat.name
    msg: "filterDiaSrcCat.filteredDiaSourceCat != transformDiaSrcCat.diaSourceCat"
  - contract: (not transformDiaSrcCat.doIncludeReliability) or
              (rbClassify.connections.ConnectionsClass(config=rbClassify).classifications.name ==
               transformDiaSrcCat.connections.ConnectionsClass(config=transformDiaSrcCat).reliability.name)
    msg: "rbClassify.classifications != transformDiaSrcCat.reliability"
  - contract: transformDiaSrcCat.connections.ConnectionsClass(config=transformDiaSrcCat).diaSourceTable.name ==
              diaPipe.connections.ConnectionsClass(config=diaPipe).diaSourceTable.name
    msg: "transformDiaSrcCat.diaSourceTable != diaPipe.diaSourceTable"
  # Run getRegionTimeFromVisit as late as possible
  - contract: transformDiaSrcCat.connections.ConnectionsClass(config=transformDiaSrcCat).diaSourceTable.name ==
              getRegionTimeFromVisit.connections.ConnectionsClass(config=getRegionTimeFromVisit).dummy_visit.name
    msg: "transformDiaSrcCat.diaSourceTable != getRegionTimeFromVisit.dummy_visit"
