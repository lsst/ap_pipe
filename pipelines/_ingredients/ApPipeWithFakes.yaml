description: AP Pipeline with synthetic/fake sources. Templates are inputs.
# This pipeline is imported by camera-specific pipelines.
# You almost certainly want to run one of those, and not this one.
#
# All tasks that take fake sources as input have the word "Fakes" in the label.
# This is for disambiguation and forward-compatibility with parallel tasks that
# use unmodified inputs, either here or in ap_verify.

# WARNING: some camera-specific pipelines importing this pipeline presently
# blow away all the configs that are set in this file.
# To update a pipeline config prior to DM-35504, you MUST put it in either,
# e.g., $AP_PIPE_DIR/config/$CAMERA/someTask.py, or in a camera-specific,
# pipeline, e.g., $AP_PIPE_DIR/pipelines/$CAMERA/ApPipeWithFakes.yaml.

imports:
  - location: $AP_PIPE_DIR/pipelines/_ingredients/ProcessCcd.yaml
parameters:
  coaddName: goodSeeing
  fakesType: 'fakes_'

tasks:
  createFakes:
    class: lsst.ap.pipe.createApFakes.CreateRandomApFakesTask
    config:
      connections.fakesType: parameters.fakesType
      magMin: 20
      magMax: 27
      fraction: 0
      fakeDensity: 5000
  coaddFakes:
    class: lsst.pipe.tasks.insertFakes.InsertFakesTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      doSubSelectSources: True
      select_col: 'isTemplateSource'
  processVisitFakes:
    class: lsst.pipe.tasks.processCcdWithFakes.ProcessCcdWithVariableFakesTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      insertFakes.doSubSelectSources: True
      insertFakes.select_col: 'isVisitSource'
  retrieveTemplateWithFakes:
    class: lsst.ip.diffim.getTemplate.GetTemplateTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
  subtractImagesWithFakes:
    class: lsst.ip.diffim.subtractImages.AlardLuptonSubtractTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
  detectAndMeasureWithFakes:
    class: lsst.ip.diffim.detectAndMeasure.DetectAndMeasureTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      doSkySources: True
  rbClassifyWithFakes:
    class: lsst.meas.transiNet.RBTransiNetTask
    config:
      modelPackageStorageMode: butler
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
  transformDiaSrcCatWithFakes:
    class: lsst.ap.association.TransformDiaSourceCatalogTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      doRemoveSkySources: True
      doIncludeReliability: True  # Output from rbClassifyWithFakes
  diaPipe:
    class: lsst.ap.association.DiaPipelineTask
    config:
      doWriteAssociatedSources: True
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      # apdb.db_url: YOU MUST CONFIGURE THIS BEFORE RUNNING THE PIPELINE
  fakesMatch:
    class: lsst.pipe.tasks.matchFakes.MatchVariableFakesTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      matchDistanceArcseconds: 0.5
subsets:
  # processCcd imported unchanged from ProcessCcd.yaml
  prepareFakes:
    subset:
      - createFakes
      - coaddFakes
    description: >
      Creation of fake sources.
  apPipeWithFakes:
    subset:
      - processVisitFakes
      - retrieveTemplateWithFakes
      - subtractImagesWithFakes
      - detectAndMeasureWithFakes
      - rbClassifyWithFakes
      - transformDiaSrcCatWithFakes
      - diaPipe
      - fakesMatch
    description: >
      The AP pipeline with fakes. Requires apPipe and prepareFakes subsets.

contracts:
  - detectAndMeasureWithFakes.doSkySources == transformDiaSrcCatWithFakes.doRemoveSkySources
  # Inputs and outputs must match.
  # Use of ConnectionsClass for templated fields is a workaround for DM-30210
  - createFakes.connections.ConnectionsClass(config=createFakes).fakeCat.name ==
      coaddFakes.connections.ConnectionsClass(config=coaddFakes).fakeCat.name
  - createFakes.connections.ConnectionsClass(config=createFakes).fakeCat.name ==
      processVisitFakes.connections.ConnectionsClass(config=processVisitFakes).fakeCats.name
  - coaddFakes.connections.ConnectionsClass(config=coaddFakes).imageWithFakes.name ==
      retrieveTemplateWithFakes.connections.ConnectionsClass(config=retrieveTemplateWithFakes).coaddExposures.name
  - retrieveTemplateWithFakes.connections.ConnectionsClass(config=retrieveTemplateWithFakes).template.name ==
      subtractImagesWithFakes.connections.ConnectionsClass(config=subtractImagesWithFakes).template.name
  - subtractImagesWithFakes.connections.ConnectionsClass(config=subtractImagesWithFakes).difference.name ==
      detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).difference.name
  - subtractImagesWithFakes.connections.ConnectionsClass(config=subtractImagesWithFakes).science.name ==
      detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).science.name
  - subtractImagesWithFakes.connections.ConnectionsClass(config=subtractImagesWithFakes).template.name ==
      diaPipe.connections.ConnectionsClass(config=diaPipe).template.name
  - subtractImagesWithFakes.connections.ConnectionsClass(config=subtractImagesWithFakes).science.name ==
      diaPipe.connections.ConnectionsClass(config=diaPipe).exposure.name
  - detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).subtractedMeasuredExposure.name ==
      rbClassifyWithFakes.connections.ConnectionsClass(config=rbClassifyWithFakes).difference.name
  - detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).diaSources.name ==
      rbClassifyWithFakes.connections.ConnectionsClass(config=rbClassifyWithFakes).diaSources.name
  - detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).subtractedMeasuredExposure.name ==
      transformDiaSrcCatWithFakes.connections.ConnectionsClass(config=transformDiaSrcCatWithFakes).diffIm.name
  - detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).diaSources.name ==
      transformDiaSrcCatWithFakes.connections.ConnectionsClass(config=transformDiaSrcCatWithFakes).diaSourceCat.name
  - detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).subtractedMeasuredExposure.name ==
      diaPipe.connections.ConnectionsClass(config=diaPipe).diffIm.name
  - detectAndMeasureWithFakes.connections.ConnectionsClass(config=detectAndMeasureWithFakes).subtractedMeasuredExposure.name ==
      fakesMatch.connections.ConnectionsClass(config=fakesMatch).diffIm.name
  - (not transformDiaSrcCatWithFakes.doIncludeReliability) or
        (rbClassifyWithFakes.connections.ConnectionsClass(config=rbClassifyWithFakes).classifications.name ==
            transformDiaSrcCatWithFakes.connections.ConnectionsClass(config=transformDiaSrcCatWithFakes).reliability.name)
  - transformDiaSrcCatWithFakes.connections.ConnectionsClass(config=transformDiaSrcCatWithFakes).diaSourceTable.name ==
      diaPipe.connections.ConnectionsClass(config=diaPipe).diaSourceTable.name
  - processVisitFakes.connections.ConnectionsClass(config=processVisitFakes).outputExposure.name ==
      subtractImagesWithFakes.connections.ConnectionsClass(config=subtractImagesWithFakes).science.name
  - createFakes.connections.ConnectionsClass(config=createFakes).fakeCat.name ==
      fakesMatch.connections.ConnectionsClass(config=fakesMatch).fakeCats.name
  - diaPipe.connections.ConnectionsClass(config=diaPipe).associatedDiaSources.name ==
      fakesMatch.connections.ConnectionsClass(config=fakesMatch).associatedDiaSources.name
