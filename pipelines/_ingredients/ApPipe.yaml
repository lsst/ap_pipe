description: End to end Alert Production pipeline.
# Look in subdirectories of $AP_PIPE_DIR/pipelines to find customized pipelines
# for each camera. Those pipelines import this general AP pipeline.
#
# Per RFC-997, all variants of ApPipe must define three mutually exclusive subsets:
# - preload is tasks that can be run before raw images arrive
# - prompt is everything done by Prompt Processing starting from raws
# - afterburner is metrics and other non-essential tasks that are skipped by Prompt Processing
#
# NOTES
# Remember to run `apdb-cli create-sql`
# Option to specify connection_timeout for sqlite APDBs encountering lock errors, i.e.,
# --connection_timeout 240

imports:
  - $ANALYSIS_TOOLS_DIR/pipelines/apDetectorVisitQualityCore.yaml
parameters:
  # Pipeline configurable to run on both goodSeeing and deep templates, depending on dataset.
  coaddName: goodSeeing
  # APDB config file must be user-specified
  apdb_config:
tasks:
  loadDiaCatalogs:
    class: lsst.ap.association.LoadDiaCatalogsTask
    config:
      connections.regionTime: regionTimeInfo
      connections.diaSources: preloaded_dia_source
      connections.diaForcedSources: preloaded_dia_forced_source
      connections.diaObjects: preloaded_dia_object
      apdb_config_url: parameters.apdb_config
  isr:
    class: lsst.ip.isr.IsrTask
    config:
      connections.outputExposure: post_isr_image
      doBrighterFatter: False
  calibrateImage:
    class: lsst.pipe.tasks.calibrateImage.CalibrateImageTask
    config:
      connections.exposures: post_isr_image
      connections.initial_stars_schema: single_visit_star_schema
      connections.exposure: preliminary_visit_image
      connections.stars: single_visit_star_unstandardized
      connections.stars_footprints: single_visit_star_footprints
      connections.applied_photo_calib: initial_photoCalib_detector
      connections.background: preliminary_visit_image_background
      connections.psf_stars_footprints: single_visit_psf_star_footprints
      connections.psf_stars: single_visit_psf_star
      connections.astrometry_matches: initial_astrometry_match_detector
      connections.photometry_matches: initial_photometry_match_detector
      # Downsample footprints prior to deblending to optimize speed
      do_downsample_footprints: True
      downsample_max_footprints: 1000
  rewarpTemplate:
    class: lsst.ip.diffim.getTemplate.GetTemplateTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.bbox: preliminary_visit_image.bbox
      connections.wcs: preliminary_visit_image.wcs
      connections.coaddExposures: template_coadd
      connections.template: "{fakesType}template_detector"
  subtractImages:
    class: lsst.ip.diffim.subtractImages.AlardLuptonSubtractTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.science: "{fakesType}preliminary_visit_image"
      connections.sources: single_visit_star_footprints
      connections.template: "{fakesType}template_detector"
      connections.difference: "{fakesType}difference_image_predetection"
      connections.matchedTemplate: "{fakesType}template_matched"
      connections.psfMatchingKernel: "{fakesType}difference_kernel"
      connections.kernelSources: "{fakesType}difference_kernel_sources"
      doApplyExternalCalibrations: False
  detectAndMeasureDiaSource:
    class: lsst.ip.diffim.detectAndMeasure.DetectAndMeasureTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.science: "{fakesType}preliminary_visit_image"
      connections.matchedTemplate: "{fakesType}template_matched"
      connections.difference: "{fakesType}difference_image_predetection"
      connections.kernelSources: "{fakesType}difference_kernel_sources"
      connections.outputSchema: "{fakesType}dia_source_schema"
      connections.diaSources: "{fakesType}dia_source_unfiltered"
      connections.subtractedMeasuredExposure: "{fakesType}difference_image"
      connections.maskedStreaks: "{fakesType}goodSeeingDiff_streaks"
      doSkySources: True
  filterDiaSource:
    class: lsst.ap.association.FilterDiaSourceCatalogTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.diaSourceCat: "{fakesType}dia_source_unfiltered"
      connections.filteredDiaSourceCat: "{fakesType}dia_source_unstandardized"
      connections.rejectedDiaSources: "{fakesType}rejected_dia_source"
      connections.diffImVisitInfo: "{fakesType}difference_image.visitInfo"
      connections.longTrailedSources: "{fakesType}long_trailed_source_detector"
      doRemoveSkySources: True
  computeReliability:
    class: lsst.meas.transiNet.RBTransiNetTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.science: "{fakesType}preliminary_visit_image"
      connections.template: "{fakesType}template_detector"
      connections.difference: "{fakesType}difference_image"
      connections.diaSources: "{fakesType}dia_source_unstandardized"
      connections.classifications: "{fakesType}dia_source_reliability"
      modelPackageStorageMode: butler
  standardizeDiaSource:
    class: lsst.ap.association.TransformDiaSourceCatalogTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.diaSourceSchema: "{fakesType}dia_source_schema"
      connections.diaSourceCat: "{fakesType}dia_source_unstandardized"
      connections.diffIm: "{fakesType}difference_image"
      connections.reliability: "{fakesType}dia_source_reliability"
      connections.diaSourceTable: "{fakesType}dia_source_detector"
      doRemoveSkySources: True
      doIncludeReliability: True  # Output from computeReliability
      doUseApdbSchema: True  # Force the table columns to match the APDB definition in sdm_schemas
  getRegionTimeFromVisit:
    class: lsst.pipe.tasks.getRegionTimeFromVisit.GetRegionTimeFromVisitTask
    config:
      connections.coaddName: parameters.coaddName
      connections.dummy_visit: single_visit_star_footprints
      connections.output: regionTimeInfo
  mpSkyEphemerisQuery:
    class: lsst.ap.association.MPSkyEphemerisQueryTask
    config:
      connections.predictedRegionTime: regionTimeInfo
      connections.ssObjects: preloaded_ss_object
  associateApdb:
    class: lsst.ap.association.DiaPipelineTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.exposure: "{fakesType}preliminary_visit_image"
      connections.diaSourceTable: "{fakesType}dia_source_detector"
      connections.solarSystemObjectTable: preloaded_ss_object
      connections.diffIm: "{fakesType}difference_image"
      connections.template: "{fakesType}template_detector"
      connections.preloadedDiaObjects: preloaded_dia_object
      connections.preloadedDiaSources: preloaded_dia_source
      connections.preloadedDiaForcedSources: preloaded_dia_forced_source
      connections.associatedDiaSources: "{fakesType}dia_source_apdb"
      connections.associatedSsSources: "{fakesType}ss_source_detector"
      connections.unassociatedSsObjects: "{fakesType}ss_object_unassociated_detector"
      connections.diaForcedSources: "{fakesType}dia_forced_source_apdb"
      connections.diaObjects: "{fakesType}dia_object_apdb"
      connections.newDiaSources: "{fakesType}new_dia_source"
      connections.marginalDiaSources: "{fakesType}marginal_new_dia_source"
      apdb_config_url: parameters.apdb_config
      doPackageAlerts: True  # Test alert generation, but don't output
      alertPackager.useAveragePsf: True  # Speed up production processing; don't want as default or in ApPipeWithFakes
  makeSampledImageSubtractionMetrics:
    class: lsst.ip.diffim.SpatiallySampledMetricsTask
    config:
      connections.coaddName: parameters.coaddName
      connections.fakesType: parameters.fakesType
      connections.science: "{fakesType}preliminary_visit_image"
      connections.matchedTemplate: "{fakesType}template_matched"
      connections.template: "{fakesType}template_detector"
      connections.difference: "{fakesType}difference_image"
      connections.diaSources: "{fakesType}dia_source_unstandardized"
      connections.psfMatchingKernel: "{fakesType}difference_kernel"
      connections.spatiallySampledMetrics: "{fakesType}difference_image_metrics"

subsets:
  apPipeSingleFrame:
    subset:
      - isr
      - calibrateImage
      - analyzePreliminarySummaryStats
    description: >-
      The prompt ApPipe tasks that make up single-frame processing. Not to be confused with the
      SingleFrame.yaml pipeline, which does more than just ApPipe single frame processing, and
      is designed as a standalone alternative to ApPipe.yaml.
  processCcd:  # TODO: remove on DM-48428
    subset:
      - isr
      - calibrateImage
      - analyzePreliminarySummaryStats
    description: Deprecated alias for apPipeSingleFrame, will be removed after v29.
  apPipe:
    subset:
      - loadDiaCatalogs
      - isr
      - calibrateImage
      - rewarpTemplate
      - subtractImages
      - detectAndMeasureDiaSource
      - filterDiaSource
      - computeReliability
      - standardizeDiaSource
      - getRegionTimeFromVisit
      - mpSkyEphemerisQuery
      - associateApdb
      - analyzeAssociatedDiaSourceTable
      - analyzeTrailedDiaSourceTable
      - makeSampledImageSubtractionMetrics
      - analyzeImageDifferenceMetrics
      - analyzeDiaSourceDetectionMetrics
      - analyzeLoadDiaCatalogsMetrics
      - analyzeDiaSourceAssociationMetrics
      - analyzeAssociateDiaSourceTiming
      - analyzeSampledImageSubtractionMetrics
      - analyzePreliminarySummaryStats
    description: >
      An alias of ApPipe to use in higher-level pipelines.
  preload:
    subset:
      - loadDiaCatalogs
      - analyzeLoadDiaCatalogsMetrics
      - mpSkyEphemerisQuery
    description: Tasks that can be run before receiving raw images.
  prompt:
    subset:
      - isr
      - calibrateImage
      - rewarpTemplate
      - subtractImages
      - detectAndMeasureDiaSource
      - filterDiaSource
      - computeReliability
      - standardizeDiaSource
      - associateApdb
      - analyzeAssociatedDiaSourceTable
      - analyzeTrailedDiaSourceTable
      - analyzeImageDifferenceMetrics
      - analyzeDiaSourceDetectionMetrics
      - analyzeDiaSourceAssociationMetrics
      - analyzeAssociateDiaSourceTiming
      - analyzePreliminarySummaryStats
    description: >
      Tasks necessary to turn raw images into APDB rows and alerts.
      Requires preload subset to be run first.
  afterburner:
    subset:
      - makeSampledImageSubtractionMetrics
      - analyzeSampledImageSubtractionMetrics
    description: >
      Tasks for QA and other non-real-time processing.
      Requires prompt subset to be run first.
contracts:
  - detectAndMeasureDiaSource.doSkySources == standardizeDiaSource.doRemoveSkySources
  # Both loadDiaCatalogs and associateApdb connect to the APDB, so make sure they use the same configuration
  - loadDiaCatalogs.apdb_config_url == associateApdb.apdb_config_url
  # Inputs and outputs must match. For consistency, contracts are written in execution order:
  #     first task == second task, then sorted by (first, second)
  # Use of ConnectionsClass for templated fields is a workaround for DM-30210
  - contract: loadDiaCatalogs.connections.ConnectionsClass(config=loadDiaCatalogs).diaObjects.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).preloadedDiaObjects.name
    msg: "loadDiaCatalogs.diaObjects != associateApdb.preloadedDiaObjects"
  - contract: loadDiaCatalogs.connections.ConnectionsClass(config=loadDiaCatalogs).diaSources.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).preloadedDiaSources.name
    msg: "loadDiaCatalogs.diaSources != associateApdb.preloadedDiaSources"
  - contract: loadDiaCatalogs.connections.ConnectionsClass(config=loadDiaCatalogs).diaForcedSources.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).preloadedDiaForcedSources.name
    msg: "loadDiaCatalogs.diaForcedSources != associateApdb.preloadedDiaForcedSources"
  - contract: rewarpTemplate.connections.ConnectionsClass(config=rewarpTemplate).template.name ==
              subtractImages.connections.ConnectionsClass(config=subtractImages).template.name
    msg: "rewarpTemplate.template != subtractImages.template"
  - contract: rewarpTemplate.connections.ConnectionsClass(config=rewarpTemplate).template.name ==
              makeSampledImageSubtractionMetrics.connections.ConnectionsClass(config=makeSampledImageSubtractionMetrics).template.name
    msg: "rewarpTemplate.template != makeSampledImageSubtractionMetrics.template"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).difference.name ==
              detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).difference.name
    msg: "subtractImages.difference != detectAndMeasureDiaSource.difference"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).science.name ==
              detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).science.name
    msg: "subtractImages.science != detectAndMeasureDiaSource.science"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).template.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).template.name
    msg: "subtractImages.template != associateApdb.template"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).science.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).exposure.name
    msg: "subtractImages.science != associateApdb.exposure"
  - contract: subtractImages.connections.ConnectionsClass(config=subtractImages).matchedTemplate.name ==
              makeSampledImageSubtractionMetrics.connections.ConnectionsClass(config=makeSampledImageSubtractionMetrics).matchedTemplate.name
    msg: "subtractImages.matchedTemplate != makeSampledImageSubtractionMetrics.matchedTemplate"
  - contract: detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).diaSources.name ==
              filterDiaSource.connections.ConnectionsClass(config=filterDiaSource).diaSourceCat.name
    msg: "detectAndMeasureDiaSource.diaSources != filterDiaSource.diaSourceCat"
  - contract: detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).subtractedMeasuredExposure.name ==
              computeReliability.connections.ConnectionsClass(config=computeReliability).difference.name
    msg: "detectAndMeasureDiaSource.subtractedMeasuredExposure != computeReliability.difference"
  - contract: detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).subtractedMeasuredExposure.name ==
              standardizeDiaSource.connections.ConnectionsClass(config=standardizeDiaSource).diffIm.name
    msg: "detectAndMeasureDiaSource.subtractedMeasuredExposure != standardizeDiaSource.diffIm"
  - contract: detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).subtractedMeasuredExposure.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).diffIm.name
    msg: "detectAndMeasureDiaSource.subtractedMeasuredExposure != associateApdb.diffIm"
  - contract: detectAndMeasureDiaSource.connections.ConnectionsClass(config=detectAndMeasureDiaSource).subtractedMeasuredExposure.name ==
              makeSampledImageSubtractionMetrics.connections.ConnectionsClass(config=makeSampledImageSubtractionMetrics).difference.name
    msg: "detectAndMeasureDiaSource.subtractedMeasuredExposure != makeSampledImageSubtractionMetrics.difference"
  - contract: filterDiaSource.connections.ConnectionsClass(config=filterDiaSource).filteredDiaSourceCat.name ==
              computeReliability.connections.ConnectionsClass(config=computeReliability).diaSources.name
    msg: "filterDiaSource.filteredDiaSourceCat != computeReliability.diaSources"
  - contract: filterDiaSource.connections.ConnectionsClass(config=filterDiaSource).filteredDiaSourceCat.name ==
              standardizeDiaSource.connections.ConnectionsClass(config=standardizeDiaSource).diaSourceCat.name
    msg: "filterDiaSource.filteredDiaSourceCat != standardizeDiaSource.diaSourceCat"
  - contract: filterDiaSource.connections.ConnectionsClass(config=filterDiaSource).filteredDiaSourceCat.name ==
              makeSampledImageSubtractionMetrics.connections.ConnectionsClass(config=makeSampledImageSubtractionMetrics).diaSources.name
    msg: "filterDiaSource.filteredDiaSourceCat != makeSampledImageSubtractionMetrics.diaSources"
  - contract: filterDiaSource.connections.ConnectionsClass(config=filterDiaSource).longTrailedSources.name ==
      analyzeTrailedDiaSourceTable.connections.ConnectionsClass(config=analyzeTrailedDiaSourceTable).data.name
    msg: "filterDiaSource.longTrailedSources != analyzeTrailedDiaSourceTable.data"
  - contract: (not standardizeDiaSource.doIncludeReliability) or
              (computeReliability.connections.ConnectionsClass(config=computeReliability).classifications.name ==
               standardizeDiaSource.connections.ConnectionsClass(config=standardizeDiaSource).reliability.name)
    msg: "computeReliability.classifications != standardizeDiaSource.reliability"
  - contract: standardizeDiaSource.connections.ConnectionsClass(config=standardizeDiaSource).diaSourceTable.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).diaSourceTable.name
    msg: "standardizeDiaSource.diaSourceTable != associateApdb.diaSourceTable"
  - contract: getRegionTimeFromVisit.connections.ConnectionsClass(config=getRegionTimeFromVisit).output.name ==
              mpSkyEphemerisQuery.connections.ConnectionsClass(config=mpSkyEphemerisQuery).predictedRegionTime.name
    msg: "mpSkyEphemerisQuery.predictedRegionTime != getRegionTimeFromVisit.output"    
  - contract: (not associateApdb.doSolarSystemAssociation) or
              (mpSkyEphemerisQuery.connections.ConnectionsClass(config=mpSkyEphemerisQuery).ssObjects.name ==
              associateApdb.connections.ConnectionsClass(config=associateApdb).solarSystemObjectTable.name)
    msg: "mpSkyEphemerisQuery.ssObjects != associateApdb.solarSystemObjectTable"        
  - contract: associateApdb.connections.ConnectionsClass(config=associateApdb).associatedDiaSources.name ==
              analyzeAssociatedDiaSourceTable.connections.ConnectionsClass(config=analyzeAssociatedDiaSourceTable).data.name
    msg: "associateApdb.associatedDiaSources != analyzeAssociatedDiaSourceTable.data"
  - contract: makeSampledImageSubtractionMetrics.connections.ConnectionsClass(config=makeSampledImageSubtractionMetrics).spatiallySampledMetrics.name ==
              analyzeSampledImageSubtractionMetrics.connections.ConnectionsClass(config=analyzeSampledImageSubtractionMetrics).data.name
    msg: "makeSampledImageSubtractionMetrics.spatiallySampledMetrics != analyzeSampledImageSubtractionMetrics.data"
