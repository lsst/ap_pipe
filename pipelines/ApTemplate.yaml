description: The AP template building pipeline
# Look in subdirectories of $AP_PIPE_DIR/pipelines to find customized pipelines
# for each camera. Those pipelines import this general template-building pipeline.

imports:
  - location: $AP_PIPE_DIR/pipelines/ProcessCcd.yaml
parameters:
  coaddName: goodSeeing
tasks:
  consolidateVisitSummary: lsst.pipe.tasks.postprocess.ConsolidateVisitSummaryTask
  selectGoodSeeingVisits:
    class: lsst.pipe.tasks.selectImages.BestSeeingQuantileSelectVisitsTask
    config:
      connections.coaddName: parameters.coaddName
  makeWarp:
    class: lsst.pipe.tasks.makeCoaddTempExp.MakeWarpTask
    config:
      doWriteEmptyWarps: True
      doApplyExternalPhotoCalib: False
      doApplyExternalSkyWcs: False
      makePsfMatched: True
  assembleCoadd:
    class: lsst.pipe.tasks.assembleCoadd.CompareWarpAssembleCoaddTask
    config:
      doSelectVisits: True
      doNImage: True
      assembleStaticSkyModel.doSelectVisits: True
      connections.outputCoaddName: parameters.coaddName

subsets:
  singleFrameAp:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - consolidateVisitSummary
    description: >
      Tasks to run for single frame processing that are necessary to use the good
      seeing selector to build coadds for use as difference imaging templates.
  makeTemplate:
    subset:
      - selectGoodSeeingVisits
      - makeWarp
      - assembleCoadd
    description: >
      Tasks to run once calexps and visit summaries exist to build good seeing
      coadds for use as templates.

contracts:
  - makeWarp.makeDirect is True
  - makeWarp.makePsfMatched is True
  # Use of ConnectionsClass for templated fields is a workaround for DM-30210
  - selectGoodSeeingVisits.connections.ConnectionsClass(config=selectGoodSeeingVisits).goodVisits.name ==
      assembleCoadd.connections.ConnectionsClass(config=assembleCoadd).selectedVisits.name
